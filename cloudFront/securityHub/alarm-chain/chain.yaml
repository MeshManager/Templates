AWSTemplateFormatVersion: '2010-09-09'
Description: Security Hub Prowler Findings to Slack Notification System

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action: securityhub:BatchUpdateFindings
                Resource: "*"
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:slack_security_hub_webhook_url*'

  ProwlerSlackLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SecurityHub-Prowler-Slack-Notifier
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 30
      MemorySize: 256

      Code:
        ZipFile: |
          import json
          import urllib.request
          import os
          import boto3
          
          def lambda_handler(event, context):
          
              # Secrets Manager에서 Slack 웹훅 URL 조회
              secrets_client = boto3.client('secretsmanager')
              secret_name = 'slack_security_hub_webhook_url'
          
              try:
                  get_secret_value_response = secrets_client.get_secret_value(SecretId=secret_name)
                  secret_dict = json.loads(get_secret_value_response['SecretString'])
                  webhook_url = secret_dict['SLACK_WEBHOOK_URL']
              except Exception as e:
                  print(f"Error retrieving secret: {str(e)}")
                  raise
          
              # Process all findings in the event
              for finding in event['detail']['findings']:
                  # 1. Filter Prowler findings
                  if finding['ProductName'] not in ['Prowler', 'Security Hub']:
                      continue
          
                  # 2. Filter by severity
                  severity = finding['Severity']['Label']
                  if severity not in ['CRITICAL', 'HIGH']:
                      continue
          
                  # 3. Skip already notified findings
                  if finding.get('Workflow', {}).get('Status') == 'NOTIFIED':
                      continue
          
                  # 4. Build Slack message
                  # ARN 형식 변환
                  if 'prowler' in finding.get('GeneratorId', '').lower():
                    # Prowler 형식 ARN 생성
                    check_name = finding['GeneratorId'].split('.')[-1]
                    account_id = finding['AwsAccountId']
                    region = finding['Region']
                    resource_id = finding['Resources'][0]['Id'].split(':')[-1][:12]  # 리소스 ID 축약
                    
                    # Prowler 스타일 ID 생성 (예: prowler-s3_bucket_cross_account_access-760135347993-ap-northeast-2-16c194976)
                    prowler_id = f"prowler-{check_name}-{account_id}-{region}-{resource_id}"
                    
                    # 전체 ARN 조립
                    full_arn = (
                    f"arn:aws:securityhub:{region}::product/prowler/prowler/{prowler_id}"
                    )
                  else:
                    # 기본 ARN 사용
                    full_arn = finding['Id']
                  
                  # URL 구성 (파라미터 순서 변경)
                  console_url = (
                  f"https://{finding['Region']}.console.aws.amazon.com/securityhub/home"
                  f"?region={finding['Region']}#/findings?"
                  f"selectedFindingId={encoded_arn}"
                  f"&search={search_params}"
                  )
                  
                  message = {
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": ":warning: *Security Hub Finding Alert* :warning:"
                      }
                    },
                    {
                      "type": "section",
                      "fields": [
                        {"type": "mrkdwn", "text": f"*제목:*\n{finding['Title']}"},
                                  {"type": "mrkdwn", "text": f"*계정:*\n{finding['AwsAccountId']}"},
                                  {"type": "mrkdwn", "text": f"*심각도:*\n{severity}"},
                                  {"type": "mrkdwn", "text": f"*리전:*\n{finding['Region']}"},
                                  {"type": "mrkdwn", "text": f"*리소스:*\n{finding['Resources'][0]['Id']}"},
                                  {"type": "mrkdwn", "text": f"*생성시간:*\n{finding['CreatedAt']}"}
                              ]
                          },
                          {
                              "type": "actions",
                         "elements": [
                           {
                             "type": "button",
                             "text": {"type": "plain_text", "text": "Security Hub에서 보기"},
                             "url": console_url
                           }
                         ]
                        }
                      ]
                    }
          
                  # 5. Send to Slack
                  data = json.dumps(message).encode('utf-8')
                  headers = {'Content-Type': 'application/json'}
                  req = urllib.request.Request(webhook_url, data=data, headers=headers)
          
                  try:
                      # 6. Send notification first
                      with urllib.request.urlopen(req) as response:
                          if response.status == 200:
                              print(f"Slack notification sent for {finding['Id']}")
          
                              # 7. Update workflow status to NOTIFIED
                              securityhub = boto3.client('securityhub')
                              securityhub.batch_update_findings(
                                  FindingIdentifiers=[{
                                      'Id': finding['Id'],
                                      'ProductArn': finding['ProductArn']
                                  }],
                                  Workflow={'Status': 'NOTIFIED'}
                              )
                              print(f"Updated workflow status for {finding['Id']}")
                          else:
                              raise Exception(f"Slack API error: {response.status}")
                  except Exception as e:
                      print(f"Error processing finding {finding['Id']}: {str(e)}")

  ProwlerSecurityHubEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger Lambda on Security Hub Prowler findings"
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Imported
        detail:
          findings:
            ProductName:
              - Prowler
              - Security Hub
            Severity:
              Label:
                - CRITICAL
                - HIGH
      Targets:
        - Arn: !GetAtt ProwlerSlackLambdaFunction.Arn
          Id: "ProwlerSlackLambdaTarget"

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ProwlerSlackLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ProwlerSecurityHubEventRule.Arn

Outputs:
  LambdaFunctionName:
    Value: !Ref ProwlerSlackLambdaFunction
    Description: Lambda function name
  EventRuleName:
    Value: !Ref ProwlerSecurityHubEventRule
    Description: EventBridge rule name