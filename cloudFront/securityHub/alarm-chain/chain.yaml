AWSTemplateFormatVersion: '2010-09-09'
Description: Security Hub Prowler Findings to Slack Notification System
Parameters:
  SlackWebhookUrl:
    Type: String
    Description: Enter your Slack incoming webhook URL

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action: securityhub:BatchUpdateFindings
                Resource: "*"

  ProwlerSlackLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SecurityHub-Prowler-Slack-Notifier
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          SLACK_WEBHOOK_URL: !Ref SlackWebhookUrl
      Code:
        ZipFile: |
          import json
          import urllib.request
          import os
          import boto3
          
          def lambda_handler(event, context):
              # Process all findings in the event
              for finding in event['detail']['findings']:
                  # 1. Filter Prowler findings
                  if finding['ProductName'] not in ['Prowler', 'Security Hub']:
                      continue
          
                  # 2. Filter by severity
                  severity = finding['Severity']['Label']
                  if severity not in ['CRITICAL', 'HIGH']:
                      continue
          
                  # 3. Skip already notified findings
                  if finding.get('Workflow', {}).get('Status') == 'NOTIFIED':
                      continue
          
                  # 4. Build Slack message
                  severity_encoded = urllib.parse.quote(urllib.parse.quote(severity, safe=''), safe='')
                  region_encoded = urllib.parse.quote(urllib.parse.quote(finding['Region'], safe=''), safe='')
                  
                  # Build the new URL format
                  console_url = (
                  f"https://{finding['Region']}.console.aws.amazon.com/securityhub/home"
                  f"?region={finding['Region']}#/findings?"
                  f"search=WorkflowStatus%3D%255Coperator%255C%253AEQUALS%255C%253ANEW%26"
                  f"WorkflowStatus%3D%255Coperator%255C%253AEQUALS%255C%253ANOTIFIED%26"
                  f"RecordState%3D%255Coperator%255C%253AEQUALS%255C%253AACTIVE%26"
                  f"SeverityLabel%3D%255Coperator%255C%253AEQUALS%255C%253A{severity_encoded}%26"
                  f"Region%3D{region_encoded}"
                  f"&selectedFindingId={urllib.parse.quote(finding['Id'])}"
                  )
                  
                  message = {
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": ":warning: *Security Hub Finding Alert* :warning:"
                      }
                    },
                    {
                      "type": "section",
                      "fields": [
                        {"type": "mrkdwn", "text": f"*제목:*\n{finding['Title']}"},
                                  {"type": "mrkdwn", "text": f"*계정:*\n{finding['AwsAccountId']}"},
                                  {"type": "mrkdwn", "text": f"*심각도:*\n{severity}"},
                                  {"type": "mrkdwn", "text": f"*리전:*\n{finding['Region']}"},
                                  {"type": "mrkdwn", "text": f"*리소스:*\n{finding['Resources'][0]['Id']}"},
                                  {"type": "mrkdwn", "text": f"*생성시간:*\n{finding['CreatedAt']}"}
                              ]
                          },
                          {
                              "type": "actions",
                         "elements": [
                           {
                             "type": "button",
                             "text": {"type": "plain_text", "text": "Security Hub에서 보기"},
                             "url": console_url  # Updated URL format
                           }
                         ]
                        }
                      ]
                    }
          
                  # 5. Send to Slack
                  webhook_url = os.environ['SLACK_WEBHOOK_URL']
                  data = json.dumps(message).encode('utf-8')
                  headers = {'Content-Type': 'application/json'}
                  req = urllib.request.Request(webhook_url, data=data, headers=headers)
          
                  try:
                      # 6. Send notification first
                      with urllib.request.urlopen(req) as response:
                          if response.status == 200:
                              print(f"Slack notification sent for {finding['Id']}")
          
                              # 7. Update workflow status to NOTIFIED
                              securityhub = boto3.client('securityhub')
                              securityhub.batch_update_findings(
                                  FindingIdentifiers=[{
                                      'Id': finding['Id'],
                                      'ProductArn': finding['ProductArn']
                                  }],
                                  Workflow={'Status': 'NOTIFIED'}
                              )
                              print(f"Updated workflow status for {finding['Id']}")
                          else:
                              raise Exception(f"Slack API error: {response.status}")
                  except Exception as e:
                      print(f"Error processing finding {finding['Id']}: {str(e)}")

  ProwlerSecurityHubEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger Lambda on Security Hub Prowler findings"
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Imported
        detail:
          findings:
            ProductName:
              - Prowler
              - Security Hub
            Severity:
              Label:
                - CRITICAL
                - HIGH
      Targets:
        - Arn: !GetAtt ProwlerSlackLambdaFunction.Arn
          Id: "ProwlerSlackLambdaTarget"

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ProwlerSlackLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ProwlerSecurityHubEventRule.Arn

Outputs:
  LambdaFunctionName:
    Value: !Ref ProwlerSlackLambdaFunction
    Description: Lambda function name
  EventRuleName:
    Value: !Ref ProwlerSecurityHubEventRule
    Description: EventBridge rule name